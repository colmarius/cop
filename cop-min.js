// Cop.js 0.1.0
//
// (c) 2012 Marius Colacioiu
// Cop library may be freely distributed under Apache 2.0 license.
// For all details and documentation:
// http://colmarius.github.com/cop/
(function(){function l(a){this.values=b.clone(a)||{}}function h(a,c){var e=b.pluck(a,"name");c&&e.sort();return e.join(",")}var k=this,i;i="undefined"!==typeof exports?exports:k.Cop={};i.VERSION="0.1.0";var b=k._;!b&&"undefined"!==typeof require&&(b=require("underscore"));var m=k.Backbone;!m&&"undefined"!==typeof require&&(m=require("backbone"));var j=k.Trait;!j&&"undefined"!==typeof require&&(j=require("traits").Trait);i.Context=function(a){this._configure(a||{})};b.extend(i.Context.prototype,m.Events,
{initialize:function(){},destroy:function(){},activate:function(){if(!this.active){this.active=true;this.trigger("activate",this)}},deactivate:function(){if(this.active){this.active=false;this.trigger("deactivate",this)}},adapt:function(a,c){if(a===k)throw Error("Cannot adapt the global object.");if(!b.isObject(a))throw Error("Only objects can be adapted.");if(this.getAdaptation(a))throw Error("Object already adapted.");this.adaptations.push({object:a,trait:c});this.trigger("adapt",a)},getAdaptation:function(a){return b.find(this.adaptations,
function(b){return b.object===a})},_configure:function(a){if(!a.name||a.name==="")throw Error("Context object must have a name.");this.active=false;this.adaptations=[];this.name=a.name;if(a.initialize)this.initialize=a.initialize;if(a.destroy)this.destroy=a.destroy}});i=i.ContextManager=function(a){this._configure(a||{})};b.extend(i.prototype,m.Events,{start:function(){d("Context manager is preparing to start up.");var a=this;this.contexts.registered.each(function(c){d("Initializing context '"+c.name+
"'.");c.adaptations.length>0&&b.each(c.adaptations,function(b){a._onAdapt(b.object)});c.initialize();d("Context '"+c.name+"' is now initialized.")});this.running=true;d("Context manager is now running.");this.contexts.toActivate.length>0&&this.trigger("recompose:start");d("Context manager has started up.")},resolveConflict:function(a,c,e){var f=h(c,true),g=this.resolvedTraits.lookup(f);if(!g){g=[];this.resolvedTraits.store(f,g)}if(b.find(g,function(g){return g.object===a}))throw Error("Object already has resolved trait for contexts: "+
f+".");g.push({object:a,contexts:c,getResolvedTrait:e})},_onAdapt:function(a){b.find(this.originalObjects,function(b){return b.object===a})||this.originalObjects.push({object:a,original:b.clone(a)})},_onContextChange:function(a){d("Context '"+a.name+"' triggered "+(a.active?"activate, marked for activation.":"deactivate, marked for deactivation."));a.active?this.contexts.toActivate.push(a):this.contexts.toDeactivate.push(a);this.running?this.trigger("recompose:start"):d("Context manager not running: context '"+
a.name+"' not activated yet.")},_onRecomposeStart:function(){var a=this.contexts;d("Context recomposition started:");d("Contexts active: ["+h(a.active)+"], to activate: ["+h(a.toActivate)+"], to deactivate: ["+h(a.toDeactivate)+"].");this.composer.recompose({contexts:this.contexts,relations:this.relations})},_onRecomposeEnd:function(a){this.contexts=a;d("Context recompositon ended!");d("Contexts active: ["+h(a.active)+"], to activate: ["+h(a.toActivate)+"], to deactivate: ["+h(a.toDeactivate)+"].")},
_configure:function(a){var c=new n({contextManager:this}),e=new l,f=new l,g=this;if(!b.isArray(a.contexts)||a.contexts.length==0)throw Error("Cannot create context manager without contexts.");b.each(a.contexts,function(a){if(e.contains(a.name))throw Error("Already registered context: "+a.name+".");e.store(a.name,a);a.on("activate",g._onContextChange,g);a.on("deactivate",g._onContextChange,g);a.on("adapt",g._onAdapt,g)});b.isArray(a.relations)&&a.relations.length>0&&d("TODO: initialize context relations.");
this.on("recompose:start",this._onRecomposeStart,this);this.on("recompose:end",this._onRecomposeEnd,this);this.composer=c;this.contexts={registered:e,active:[],toActivate:[],toDeactivate:[]};this.options=a;this.originalObjects=[];this.relations=f;this.resolvedTraits=new l}});var n=function(a){this._configure(a||{})};b.extend(n.prototype,{recompose:function(a){var c,e,f=a.contexts;c=a.relations;if(this.recomposing)d("ALREADY RECOMPOSING CONTEXTS.");else{this.recomposing=true;d("Contexts Recomposition Started:");
f=this._resolveDependencies(f,c);d("Contexts with resolved dependencies: ",f);c=this._getAdaptations(f);d("Uncomposed adaptations: ",c);this._compose(c);d("Composed adaptations: ",c);e=b.filter(c,function(a){return a.hasConflict});if(e.length>0){b.each(e,function(a){var b=h(a.contexts),f=a.errorMessage,a=a.object;d("Contexts ",b,", object: ",a,", conflict: ",f);throw Error("Contexts "+b+" have unresolved conflict for object: "+a+" with error message: "+f);});f=a.contexts}else{d("No conflicts detected.");
this._install(c);f={active:b.difference(b.union(f.active,f.toActivate),f.toDeactivate),toActivate:[],toDeactivate:[]}}this.contextManager.trigger("recompose:end",f);this.recomposing=false;d("Contexts Recomposition Ended!")}},_resolveDependencies:function(a){d("TODO: resolve context dependencies.");a.active=b.difference(a.active,a.toDeactivate);a.toActivate=b.difference(a.toActivate,a.active);return a},_getAdaptations:function(a){function c(a,f,c){c||(c=false);var d=false;b.each(e,function(b){if(b.object===
f.object){d=true;if(c){b.traits.push(f.trait);b.contexts.push(a)}}});!d&&c?e.push({object:f.object,traits:[f.trait],contexts:[a]}):d||e.push({object:f.object,traits:[],contexts:[]})}var e=[];b.each(a.toActivate,function(a){b.each(a.adaptations,function(b){c(a,b,true)})});b.each(a.toDeactivate,function(a){b.each(a.adaptations,function(b){c(a,b)})});var f=this.contextManager.originalObjects;b.each(e,function(c){b.each(a.active,function(a){var b=a.getAdaptation(c.object);if(b){c.traits.push(b.trait);
c.contexts.push(a)}});var e=b.find(f,function(a){return a.object===c.object});c.originalObject=b.clone(e.original)});return e},_compose:function(a){function c(a){var c=h(a.contexts,true),c=e.lookup(c);if(c=b.find(c,function(b){return b.object===a.object})){var d=[];b.each(c.contexts,function(c){c=b.indexOf(a.contexts,c);d.push(a.traits[c])});c=c.getResolvedTrait.apply(null,d);a.composedTrait=c;delete a.hasConflict;delete a.errorMessage;a.resolved=true}}var e=this.contextManager.resolvedTraits;b.each(a,
function(a){a.composedTrait=j.compose.apply(null,a.traits);try{j.create({},a.composedTrait)}catch(b){a.hasConflict=true;a.errorMessage=b.message}a.hasConflict&&c(a);if(a.hasConflict&&!a.resolved)d("No resolved trait provided for object: ",a.object," and contexts: ",h(a.contexts));else{var e={};e._super=a.originalObject;e=j.compose(a.composedTrait,j(e));a.composedObject=Object.create(a.originalObject,e)}})},_install:function(a){function c(a,c){b.each(b.keys(a),function(b){delete a[b]});b.extend(a,
c)}b.each(a,function(a){c(a.object,a.composedObject)})},_configure:function(a){if(!a.contextManager)throw Error("Cannot create composer without a context manager.");this.contextManager=a.contextManager}});b.extend(l.prototype,{store:function(a,b){this.values[a]=b},lookup:function(a){return this.values[a]},contains:function(a){return Object.prototype.hasOwnProperty.call(this.values,a)&&Object.prototype.propertyIsEnumerable.call(this.values,a)},each:function(a){b.each(this.values,a)}});var o=i.history=
[],d=function(){o.push(b.toArray(arguments))};i.showHistory=function(){b.each(o,function(a){console.log(a)})}}).call(this);
