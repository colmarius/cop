Summary
=======

It is a library which gives a programmer constructs to write applications in a 
context-oriented way. It achieves context-oriented programming in a different
way by using traits as basic building blocks. It is in an experimental state.

Primer on Context-oriented Programming
--------------------------------------

COP introduces a new way of writing applications which for me was not 
straightforward at first. The main contribution, as I see it, is in code 
modularization. Contexts are normal objects used to clearly encapsulate 
application behaviour. They differ from normal objects in how you use them. 
A context object defines part of application behaviour. Later on at run-time 
on request (meaning context activation), part of application behaviour will 
make part of the global system. Analogously, at context deactivation, previous 
application behaviour, changed by the context, will be restored. There can be 
one or more contexts in the system, active or inactive, at all times.

Why Traits
----------

Traits are just a way to factor out and recombine reusable pieces of code. 
Alternatives are multiple-inheritance and mixins. Traits are more robust as
name conflicts must be explicitly resolved by a composer. 

This library makes use of the traits library written by Tom Van Cutsem, which 
can be found at: http://www.traitsjs.org

Detailed information on traits and how to use them can be found at the above 
site.

What `cop-traits` does?
-----------------------

This library gives a programmer the constructs to write an application in a 
context-oriented way.

With this library one can:

1. define contexts as normal objects

2. adapt an object with one or more traits under any context

3. activate and deactivate any given context

Contexts are implicitly registered to the context manager after creation, which
keeps track of all created contexts. They can be optionally published to a 
context registry with a public name. Later on can be retrieved from the same 
context registry by providing the correct public name.

For a given context one can specify "adaptation requests" for any object. 
This is a request to extend the functionality of an object, or replace part of 
it, with one or more traits. When the context will become active, this traits 
will be composed with the default object behavior. We are exploring the traits
composition mechanism for resolving conflicts at context activation time.

Contexts can be programmatically activated and deactivated. This results in a 
global recomposition of all adapted objects for all active contexts. This 
because at all times, the "default context" will be active. This context 
contains the default behavior for all adapted objects. This is the original 
behaviour of the object prior to any context activation.

Adaptation conflicts for an object happen at method level. If two or more 
contexts become active all the traits given in the adaptation requests for each 
object will get composed. There is a composition conflict for an object, if 
traits under different contexts provide functionality with the same property 
name.

There is a "default policy" for resolving conflicts, which overrides 
conflicting behavior by giving precedence to the most recently activated 
context. 

Contexts can be combined. A combined context object can be used to give more 
specific adaptations to a number of objects. A combined context becomes active
when all subcontexts become active. It is a way of resolving conflicts 
between different contexts.

Examples
========
Can be found in the examples directory.

Simple use
----------
You can look first at "quickstart" where you can see how to create a context 
and to adapt an object under a context.

Then you can check out the "using-contexts" example where you can see a more 
practical use of contexts. You shall see how you can write code which is 
specific to the Android or Profiler context.

More advanced use
-----------------
To show how this library can be used to adapt code written by others, two
demos have been done. They are couchapps hosted on a couchone istance.
A couchapp is just an web application hosted on a couchdb. More on couchapp 
and couchdb at [couchone.com](http://www.couchone.com/products).

1. [jquerymobile](http://colmarius.couchone.com:5984/jquerymobile/_design/jquerymobile/index.html)

This demo shows you how to adapt the [jquerymobile](http://jquerymobile.com) library. 
In the demo you can chose to activate a "low battery" context. When it will be 
active the changePage method of the jquerymobile library. This method is used
internally by the library when page transitions occurr. It will change so as to
ignore any graphical transition from a page to another.


2. [albums](http://colmarius.couchone.com:5984/albums/_design/albums/index.html)

The "albums" application is also hosted on couchone.

Building
========

Mac OSX, Linux & BSD
--------------------

	cd cop-traits
	./build

Directory Map
=============

Important files in the directory tree are:

- `cop.js`
- `cop-min.js`

Note
====

This work of exploring Context-oriented programming with Traits on Javascript
is done for my master thesis in computer science.
